-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.


-- Generated by Quartus II 64-Bit Version 13.0 (Build Build 232 06/12/2013)
-- Created on Fri Nov 29 16:59:02 2024

COMPONENT testBlock
	PORT
	(
		clk		:	 IN STD_LOGIC;
		reset		:	 IN STD_LOGIC;
		w3		:	 IN STD_LOGIC;
		w10		:	 IN STD_LOGIC;
		w7		:	 IN STD_LOGIC;
		w0		:	 IN STD_LOGIC;
		w17		:	 IN STD_LOGIC;
		w21		:	 IN STD_LOGIC;
		w1		:	 IN STD_LOGIC;
		w4		:	 IN STD_LOGIC;
		w14		:	 IN STD_LOGIC;
		w11		:	 IN STD_LOGIC;
		w8		:	 IN STD_LOGIC;
		w22		:	 IN STD_LOGIC;
		w18		:	 IN STD_LOGIC;
		w15		:	 IN STD_LOGIC;
		w6		:	 IN STD_LOGIC;
		w2		:	 IN STD_LOGIC;
		w13		:	 IN STD_LOGIC;
		w9		:	 IN STD_LOGIC;
		w20		:	 IN STD_LOGIC;
		w16		:	 IN STD_LOGIC;
		w5		:	 IN STD_LOGIC;
		w12		:	 IN STD_LOGIC;
		w23		:	 IN STD_LOGIC;
		w19		:	 IN STD_LOGIC;
		Error		:	 OUT STD_LOGIC;
		REG0_S		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG0_E		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG1_N		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG1_S		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG1_E		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG2_N		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG2_E		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG3_N		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG3_S		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG3_E		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG4_O		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG4_S		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG4_E		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG5_N		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG5_O		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG5_S		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG5_E		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG6_O		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG6_N		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG6_E		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG7_N		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG7_S		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG7_O		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG7_E		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG8_S		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG8_O		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG9_N		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG9_S		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG9_O		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG11_N		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG11_S		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG11_O		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG12_O		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG12_E		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG12_S		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG13_O		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG13_E		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG13_N		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG13_S		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG14_O		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG14_E		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG14_N		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG15_O		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG15_E		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG15_N		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		REG15_S		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
	);
END COMPONENT;